{
  "version": 3,
  "sources": ["../../src/app/querys.ts"],
  "sourcesContent": ["import { useConnection } from '../connection';\nimport type { TableItem } from '../lib/adapter-config';\nimport type { SqlIobrokerAdapterRow, TableSize } from '../types/types';\nimport { getRetentionTime, isDefined, roundValue } from '../lib/lib';\n\nexport async function createNewTable(table: string): Promise<void> {\n    return useConnection(async connection => {\n        const query = `\n            CREATE TABLE IF NOT EXISTS ${table}\n            (\n                id\n                    INT,\n                ts\n                    BIGINT,\n                val\n                    DOUBLE,\n                unit\n                    VARCHAR(50),\n                createdAt\n                    TIMESTAMP\n                    DEFAULT\n                        CURRENT_TIMESTAMP\n            )`;\n        await connection.query(query);\n    });\n}\n\nexport const removeOldData = async (entry: TableItem): Promise<void> => {\n    const timestamp = getRetentionTime(entry);\n    if (timestamp === 0) {\n        return; // No retention, nothing to delete\n    }\n    return useConnection(async connection => {\n        const deleteQuery = `DELETE\n                             FROM ${entry.tableTo}\n                             WHERE ts <= ?`;\n        await connection.execute(deleteQuery, [timestamp]);\n    });\n};\n\nexport const saveData = async (entry: TableItem, date: number, val: number): Promise<void> => {\n    return useConnection(async connection => {\n        const saveQuery = `INSERT INTO ${entry.tableTo} (id, ts, val, unit)\n                           VALUES (?, ?, ?, ?)`;\n        if (!isDefined(val)) {\n            return;\n        }\n        await connection.execute(saveQuery, [entry.id, date, roundValue(entry, val), entry.unit ?? '']);\n    });\n};\n\nexport const saveDataArray = async (entry: TableItem, table: SqlIobrokerAdapterRow[]): Promise<void> => {\n    return useConnection(async connection => {\n        const saveQuery = `INSERT INTO ${entry.tableTo} (id, ts, val, unit)\n                           VALUES (?, ?, ?, ?)`;\n\n        for (const row of table) {\n            if (!isDefined(row.val)) {\n                continue;\n            }\n            if (row.val === 0 && !entry.writeZero) {\n                continue;\n            }\n            await connection.execute(saveQuery, [entry.id, row.ts, roundValue(entry, row.val), entry.unit ?? '']);\n        }\n    });\n};\n\nexport const getAllTables = async (): Promise<string[]> => {\n    return useConnection(async connection => {\n        const [rows] = await connection.query('SHOW TABLES');\n\n        const result = rows as Record<string, string>[];\n\n        return result.map((row): string => {\n            return Object.keys(row).map(key => row[key])[0];\n        });\n    });\n};\n\nexport const setTimeZone = async (timeZone?: string): Promise<void> => {\n    if (timeZone === '0' || !timeZone) {\n        return;\n    }\n    return await useConnection(async connection => {\n        const query = `SET time_zone = ?`;\n        await connection.query(query, timeZone);\n    });\n};\n\nexport const getTableSize = async (database: string, table: string): Promise<TableSize> => {\n    return await useConnection(async (connection): Promise<TableSize> => {\n        const [rows] = await connection.execute(\n            `SELECT table_name                                             AS \"table\",\n                    round(((data_length + index_length) / 1024 / 1024), 2) AS \"size_(MB)\"\n             FROM information_schema.TABLES\n             WHERE table_schema = ?\n               AND table_name = ?;\n            `,\n            [database, table],\n        );\n\n        if ((rows as TableSize[]).length) {\n            return (rows as TableSize[])[0];\n        }\n        throw new Error(`Tabelle ${table} nicht gefunden.`);\n    });\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA8B;AAG9B,iBAAwD;AAExD,eAAsB,eAAe,OAA8B;AAC/D,aAAO,iCAAc,OAAM,eAAc;AACrC,UAAM,QAAQ;AAAA,yCACmB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAetC,UAAM,WAAW,MAAM,KAAK;AAAA,EAChC,CAAC;AACL;AAEO,MAAM,gBAAgB,OAAO,UAAoC;AACpE,QAAM,gBAAY,6BAAiB,KAAK;AACxC,MAAI,cAAc,GAAG;AACjB;AAAA,EACJ;AACA,aAAO,iCAAc,OAAM,eAAc;AACrC,UAAM,cAAc;AAAA,oCACQ,MAAM,OAAO;AAAA;AAEzC,UAAM,WAAW,QAAQ,aAAa,CAAC,SAAS,CAAC;AAAA,EACrD,CAAC;AACL;AAEO,MAAM,WAAW,OAAO,OAAkB,MAAc,QAA+B;AAC1F,aAAO,iCAAc,OAAM,eAAc;AAzC7C;AA0CQ,UAAM,YAAY,eAAe,MAAM,OAAO;AAAA;AAE9C,QAAI,KAAC,sBAAU,GAAG,GAAG;AACjB;AAAA,IACJ;AACA,UAAM,WAAW,QAAQ,WAAW,CAAC,MAAM,IAAI,UAAM,uBAAW,OAAO,GAAG,IAAG,WAAM,SAAN,YAAc,EAAE,CAAC;AAAA,EAClG,CAAC;AACL;AAEO,MAAM,gBAAgB,OAAO,OAAkB,UAAkD;AACpG,aAAO,iCAAc,OAAM,eAAc;AApD7C;AAqDQ,UAAM,YAAY,eAAe,MAAM,OAAO;AAAA;AAG9C,eAAW,OAAO,OAAO;AACrB,UAAI,KAAC,sBAAU,IAAI,GAAG,GAAG;AACrB;AAAA,MACJ;AACA,UAAI,IAAI,QAAQ,KAAK,CAAC,MAAM,WAAW;AACnC;AAAA,MACJ;AACA,YAAM,WAAW,QAAQ,WAAW,CAAC,MAAM,IAAI,IAAI,QAAI,uBAAW,OAAO,IAAI,GAAG,IAAG,WAAM,SAAN,YAAc,EAAE,CAAC;AAAA,IACxG;AAAA,EACJ,CAAC;AACL;AAEO,MAAM,eAAe,YAA+B;AACvD,aAAO,iCAAc,OAAM,eAAc;AACrC,UAAM,CAAC,IAAI,IAAI,MAAM,WAAW,MAAM,aAAa;AAEnD,UAAM,SAAS;AAEf,WAAO,OAAO,IAAI,CAAC,QAAgB;AAC/B,aAAO,OAAO,KAAK,GAAG,EAAE,IAAI,SAAO,IAAI,GAAG,CAAC,EAAE,CAAC;AAAA,IAClD,CAAC;AAAA,EACL,CAAC;AACL;AAEO,MAAM,cAAc,OAAO,aAAqC;AACnE,MAAI,aAAa,OAAO,CAAC,UAAU;AAC/B;AAAA,EACJ;AACA,SAAO,UAAM,iCAAc,OAAM,eAAc;AAC3C,UAAM,QAAQ;AACd,UAAM,WAAW,MAAM,OAAO,QAAQ;AAAA,EAC1C,CAAC;AACL;AAEO,MAAM,eAAe,OAAO,UAAkB,UAAsC;AACvF,SAAO,UAAM,iCAAc,OAAO,eAAmC;AACjE,UAAM,CAAC,IAAI,IAAI,MAAM,WAAW;AAAA,MAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,CAAC,UAAU,KAAK;AAAA,IACpB;AAEA,QAAK,KAAqB,QAAQ;AAC9B,aAAQ,KAAqB,CAAC;AAAA,IAClC;AACA,UAAM,IAAI,MAAM,WAAW,KAAK,kBAAkB;AAAA,EACtD,CAAC;AACL;",
  "names": []
}
