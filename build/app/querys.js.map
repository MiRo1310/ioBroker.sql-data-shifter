{
  "version": 3,
  "sources": ["../../src/app/querys.ts"],
  "sourcesContent": ["import { useConnection } from \"../connection\";\nimport type { TableItem } from \"../lib/adapter-config\";\nimport type { SqlIobrokerAdapterRow } from \"../types/types\";\n\nexport async function createNewTable(table: string): Promise<void> {\n    return useConnection(async (connection) => {\n        const query = `\n            CREATE TABLE IF NOT EXISTS ${table}\n            (\n                id\n                    INT,\n                ts\n                    BIGINT,\n                val\n                    DOUBLE,\n                unit\n                    VARCHAR(50),\n                createdAt\n                    TIMESTAMP\n                    DEFAULT\n                        CURRENT_TIMESTAMP\n            )`;\n        await connection.query(query);\n    });\n}\n\nexport const saveData = async (entry: TableItem, date: number, val: number): Promise<void> => {\n    return useConnection(async (connection) => {\n        const saveQuery = `INSERT INTO ${entry.tableTo} (id, ts, val, unit)\n                           VALUES (?, ?, ?, ?)`;\n        if (val === null) {\n            return;\n        }\n        await connection.execute(saveQuery, [entry.id, date, val, entry.unit ?? \"\"]);\n    });\n};\n\nexport const saveDataArray = async (entry: TableItem, table: SqlIobrokerAdapterRow[]): Promise<void> => {\n    return useConnection(async (connection) => {\n        const saveQuery = `INSERT INTO ${entry.tableTo} (id, ts, val, unit)\n                           VALUES (?, ?, ?, ?)`;\n\n        for (const row of table) {\n            if (row.val === null) {\n                continue;\n            }\n            if (row.val === 0 && !entry.writeZero) {\n                continue;\n            }\n            await connection.execute(saveQuery, [entry.id, row.ts, row.val, entry.unit ?? \"\"]);\n        }\n    });\n};\n\nexport const getAllTables = async (): Promise<string[]> => {\n    return useConnection(async (connection) => {\n        const [rows] = await connection.query(\"SHOW TABLES\");\n\n        const result = rows as Record<string, string>[];\n\n        return result.map((row): string => {\n            return Object.keys(row).map((key) => row[key])[0];\n        });\n    });\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA8B;AAI9B,eAAsB,eAAe,OAA8B;AAC/D,aAAO,iCAAc,OAAO,eAAe;AACvC,UAAM,QAAQ;AAAA,yCACmB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAetC,UAAM,WAAW,MAAM,KAAK;AAAA,EAChC,CAAC;AACL;AAEO,MAAM,WAAW,OAAO,OAAkB,MAAc,QAA+B;AAC1F,aAAO,iCAAc,OAAO,eAAe;AA3B/C;AA4BQ,UAAM,YAAY,eAAe,MAAM,OAAO;AAAA;AAE9C,QAAI,QAAQ,MAAM;AACd;AAAA,IACJ;AACA,UAAM,WAAW,QAAQ,WAAW,CAAC,MAAM,IAAI,MAAM,MAAK,WAAM,SAAN,YAAc,EAAE,CAAC;AAAA,EAC/E,CAAC;AACL;AAEO,MAAM,gBAAgB,OAAO,OAAkB,UAAkD;AACpG,aAAO,iCAAc,OAAO,eAAe;AAtC/C;AAuCQ,UAAM,YAAY,eAAe,MAAM,OAAO;AAAA;AAG9C,eAAW,OAAO,OAAO;AACrB,UAAI,IAAI,QAAQ,MAAM;AAClB;AAAA,MACJ;AACA,UAAI,IAAI,QAAQ,KAAK,CAAC,MAAM,WAAW;AACnC;AAAA,MACJ;AACA,YAAM,WAAW,QAAQ,WAAW,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,MAAK,WAAM,SAAN,YAAc,EAAE,CAAC;AAAA,IACrF;AAAA,EACJ,CAAC;AACL;AAEO,MAAM,eAAe,YAA+B;AACvD,aAAO,iCAAc,OAAO,eAAe;AACvC,UAAM,CAAC,IAAI,IAAI,MAAM,WAAW,MAAM,aAAa;AAEnD,UAAM,SAAS;AAEf,WAAO,OAAO,IAAI,CAAC,QAAgB;AAC/B,aAAO,OAAO,KAAK,GAAG,EAAE,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAC,EAAE,CAAC;AAAA,IACpD,CAAC;AAAA,EACL,CAAC;AACL;",
  "names": []
}
