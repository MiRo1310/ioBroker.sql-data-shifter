{
  "version": 3,
  "sources": ["../../src/app/tableSize.ts"],
  "sourcesContent": ["import { getAllTables, getTableSize } from \"./querys\";\nimport type { TableSize } from \"../types/types\";\nimport { _this, dbConfig } from \"../main\";\nimport type { Job } from \"node-schedule\";\n// eslint-disable-next-line no-duplicate-imports\nimport schedule from \"node-schedule\";\nimport { datapoints } from \"./datapoints\";\nimport { toJSON } from \"../lib/lib\";\n\nconst getTableSizes = async (): Promise<TableSize[]> => {\n    const tables = await getAllTables();\n    const tableSizes: TableSize[] = [];\n    await Promise.all(\n        tables.map(async (table) => {\n            tableSizes.push(await getTableSize(dbConfig.database, table));\n        }),\n    );\n    return tableSizes;\n};\n\nexport let tableSizeCron: Job | undefined = undefined;\nexport const initTableSizes = async (cron: string): Promise<void> => {\n    if (cron === \"0\") {\n        return;\n    }\n    await setTableSize(true);\n\n    tableSizeCron = schedule.scheduleJob(cron, async () => {\n        await setTableSize();\n    });\n};\n\nasync function setTableSize(init?: boolean): Promise<void> {\n    const tableSizes = await getTableSizes();\n\n    if (init) {\n        await createDatapoints(tableSizes);\n    }\n    await _this.setState(datapoints.tableSize, toJSON(tableSizes), true);\n\n    for (const tableSize of tableSizes) {\n        checkSizes(tableSize);\n        await _this.setState(`${datapoints.tableSizeFolder}.${tableSize.table}`, Number(tableSize[\"size_(MB)\"]), true);\n    }\n}\n\nfunction checkSizes(tableSize: TableSize): void {\n    const { info, warning, error } = _this.config;\n\n    if (error && tableSize[\"size_(MB)\"] >= error) {\n        _this.log.error(`Table ${tableSize.table} is larger than error setting ${tableSize[\"size_(MB)\"]} MB`);\n        return;\n    }\n\n    if (warning && tableSize[\"size_(MB)\"] >= warning) {\n        _this.log.warn(`Table ${tableSize.table} is larger than warning setting: ${tableSize[\"size_(MB)\"]} MB`);\n        return;\n    }\n\n    if (info) {\n        _this.log.info(`Size of table ${tableSize.table} is ${tableSize[\"size_(MB)\"]} MB`);\n        return;\n    }\n}\n\nasync function createDatapoints(tableSizes: TableSize[]): Promise<void> {\n    await _this.setObjectNotExistsAsync(datapoints.tableSize, {\n        type: \"state\",\n        common: {\n            name: \"tableSizeJson\",\n            type: \"string\",\n            role: \"json\",\n            read: true,\n            write: false,\n        },\n        native: {},\n    });\n    for (const tableSize of tableSizes) {\n        await _this.setObjectNotExistsAsync(`${datapoints.tableSizeFolder}.${tableSize.table}`, {\n            type: \"state\",\n            common: {\n                name: tableSize.table,\n                type: \"number\",\n                role: \"indicator\",\n                read: true,\n                write: false,\n                unit: \"MB\",\n            },\n            native: {},\n        });\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA2C;AAE3C,kBAAgC;AAGhC,2BAAqB;AACrB,wBAA2B;AAC3B,iBAAuB;AAEvB,MAAM,gBAAgB,YAAkC;AACpD,QAAM,SAAS,UAAM,4BAAa;AAClC,QAAM,aAA0B,CAAC;AACjC,QAAM,QAAQ;AAAA,IACV,OAAO,IAAI,OAAO,UAAU;AACxB,iBAAW,KAAK,UAAM,4BAAa,qBAAS,UAAU,KAAK,CAAC;AAAA,IAChE,CAAC;AAAA,EACL;AACA,SAAO;AACX;AAEO,IAAI,gBAAiC;AACrC,MAAM,iBAAiB,OAAO,SAAgC;AACjE,MAAI,SAAS,KAAK;AACd;AAAA,EACJ;AACA,QAAM,aAAa,IAAI;AAEvB,kBAAgB,qBAAAA,QAAS,YAAY,MAAM,YAAY;AACnD,UAAM,aAAa;AAAA,EACvB,CAAC;AACL;AAEA,eAAe,aAAa,MAA+B;AACvD,QAAM,aAAa,MAAM,cAAc;AAEvC,MAAI,MAAM;AACN,UAAM,iBAAiB,UAAU;AAAA,EACrC;AACA,QAAM,kBAAM,SAAS,6BAAW,eAAW,mBAAO,UAAU,GAAG,IAAI;AAEnE,aAAW,aAAa,YAAY;AAChC,eAAW,SAAS;AACpB,UAAM,kBAAM,SAAS,GAAG,6BAAW,eAAe,IAAI,UAAU,KAAK,IAAI,OAAO,UAAU,WAAW,CAAC,GAAG,IAAI;AAAA,EACjH;AACJ;AAEA,SAAS,WAAW,WAA4B;AAC5C,QAAM,EAAE,MAAM,SAAS,MAAM,IAAI,kBAAM;AAEvC,MAAI,SAAS,UAAU,WAAW,KAAK,OAAO;AAC1C,sBAAM,IAAI,MAAM,SAAS,UAAU,KAAK,iCAAiC,UAAU,WAAW,CAAC,KAAK;AACpG;AAAA,EACJ;AAEA,MAAI,WAAW,UAAU,WAAW,KAAK,SAAS;AAC9C,sBAAM,IAAI,KAAK,SAAS,UAAU,KAAK,oCAAoC,UAAU,WAAW,CAAC,KAAK;AACtG;AAAA,EACJ;AAEA,MAAI,MAAM;AACN,sBAAM,IAAI,KAAK,iBAAiB,UAAU,KAAK,OAAO,UAAU,WAAW,CAAC,KAAK;AACjF;AAAA,EACJ;AACJ;AAEA,eAAe,iBAAiB,YAAwC;AACpE,QAAM,kBAAM,wBAAwB,6BAAW,WAAW;AAAA,IACtD,MAAM;AAAA,IACN,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,IACX;AAAA,IACA,QAAQ,CAAC;AAAA,EACb,CAAC;AACD,aAAW,aAAa,YAAY;AAChC,UAAM,kBAAM,wBAAwB,GAAG,6BAAW,eAAe,IAAI,UAAU,KAAK,IAAI;AAAA,MACpF,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,UAAU;AAAA,QAChB,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,MACV;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AAAA,EACL;AACJ;",
  "names": ["schedule"]
}
