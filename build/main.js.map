{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.6.5\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport type { DBConfig, SqlIobrokerAdapterRow } from './types/types';\r\nimport { useConnection } from './connection';\r\nimport { addParamsToTableItem, calculateAverage, differenceResult, sumResult } from './lib/lib';\r\nimport type { Job } from 'node-schedule';\r\n// eslint-disable-next-line no-duplicate-imports\r\nimport schedule from 'node-schedule';\r\nimport { createNewTable, getAllTables, removeOldData, saveData, saveDataArray, setTimeZone } from './app/querys';\r\nimport { getDatapointsTable } from './app/getTablesForFrontendUsage';\r\nimport { initTableSizes, tableSizeCron } from './app/tableSize';\r\n\r\nexport const dbConfig: DBConfig = {} as DBConfig;\r\nexport let _this: SqlDataShifter;\r\n\r\nclass SqlDataShifter extends utils.Adapter {\r\n    private scheduleJob: Job[];\r\n\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: 'sql-data-shifter',\r\n        });\r\n        this.scheduleJob = [];\r\n        this.on('ready', this.onReady.bind(this));\r\n        // this.on(\"stateChange\", this.onStateChange.bind(this));\r\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\r\n        this.on('message', this.onMessage.bind(this));\r\n        this.on('unload', this.onUnload.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Is called when databases are connected and adapter received configuration.\r\n     */\r\n    private async onReady(): Promise<void> {\r\n        const { user, database, password, ip } = this.config;\r\n\r\n        if (!user || !password || !database) {\r\n            return;\r\n        }\r\n        _this = this;\r\n\r\n        dbConfig.host = ip;\r\n        dbConfig.user = user;\r\n        dbConfig.password = password;\r\n        dbConfig.database = database;\r\n        let isConnectionSuccessful = false;\r\n        try {\r\n            isConnectionSuccessful = await useConnection(async connection => {\r\n                if (connection) {\r\n                    await this.setState('info.connection', true, true);\r\n                    return true;\r\n                }\r\n                this.log.error('Connection failed');\r\n                return false;\r\n            });\r\n        } catch (e) {\r\n            this.log.error(`Connection failed: ${JSON.stringify(e)}`);\r\n            await this.setState('info.connection', false, true);\r\n            return;\r\n        }\r\n\r\n        if (!isConnectionSuccessful) {\r\n            return;\r\n        }\r\n\r\n        await setTimeZone(this.config.timeZone);\r\n        await initTableSizes(this.config.tableSizeCron);\r\n\r\n        const tableObject = addParamsToTableItem(this.config.table);\r\n\r\n        for (const entry of tableObject) {\r\n            if (!entry.active) {\r\n                continue;\r\n            }\r\n            await createNewTable(entry.tableTo);\r\n\r\n            const timeInMilliseconds = entry.time * 1000;\r\n\r\n            const job = schedule.scheduleJob(entry.schedule, async () => {\r\n                await useConnection(async connection => {\r\n                    const date = Date.now();\r\n                    this.log.debug(\r\n                        `Schedule job for id: ${entry.id} started, from ${entry.tableFrom} to ${entry.tableTo}`,\r\n                    );\r\n\r\n                    const selectQuery = `SELECT *\r\n                                         from ${entry.tableFrom}\r\n                                         WHERE id = ?\r\n                                           AND ts <= ?\r\n                                           AND ts > ?`;\r\n\r\n                    const [rows] = await connection.execute(selectQuery, [\r\n                        entry.id,\r\n                        date,\r\n                        entry.oldTimestamp || date - timeInMilliseconds,\r\n                    ]);\r\n\r\n                    this.log.debug(`Date: ${date}, Old date: ${entry.oldTimestamp}`);\r\n\r\n                    this.log.debug(`Rows: ${JSON.stringify(rows)}`);\r\n                    entry.oldTimestamp = date;\r\n                    const result = rows as SqlIobrokerAdapterRow[];\r\n\r\n                    if (result.length === 0) {\r\n                        this.log.debug(`No data found for ${entry.id} in ${entry.tableFrom}`);\r\n                        return;\r\n                    }\r\n\r\n                    if (entry.operation === 'sum') {\r\n                        const sum = sumResult(result) * entry.factor;\r\n                        if (sum === 0 && !entry.writeZero) {\r\n                            return;\r\n                        }\r\n                        await removeOldData(entry);\r\n                        await saveData(entry, date, sum);\r\n                    }\r\n\r\n                    if (entry.operation === 'dif') {\r\n                        const sum = differenceResult(result) * entry.factor;\r\n                        if (sum === 0 && !entry.writeZero) {\r\n                            return;\r\n                        }\r\n                        await saveData(entry, date, sum);\r\n                        await removeOldData(entry);\r\n                    }\r\n\r\n                    if (entry.operation === 'avg') {\r\n                        const average = calculateAverage(result) * entry.factor;\r\n                        if (average === 0 && !entry.writeZero) {\r\n                            return;\r\n                        }\r\n                        await saveData(entry, date, average);\r\n                        await removeOldData(entry);\r\n                    }\r\n\r\n                    if (entry.operation === 'all') {\r\n                        await saveDataArray(entry, result);\r\n                        await removeOldData(entry);\r\n                    }\r\n\r\n                    if (entry.delete) {\r\n                        const deleteQuery = `DELETE\r\n                                             FROM ${entry.tableFrom}\r\n                                             WHERE id = ?\r\n                                               AND ts <= ?`;\r\n\r\n                        await connection.execute(deleteQuery, [entry.id, date]);\r\n                    }\r\n                });\r\n            });\r\n            this.scheduleJob.push(job);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     *\r\n     * @param callback Callback\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            this.scheduleJob.forEach(job => job.cancel());\r\n            tableSizeCron?.cancel();\r\n            callback();\r\n        } catch (e) {\r\n            console.error(e);\r\n            callback();\r\n        }\r\n    }\r\n\r\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\r\n        switch (obj.command) {\r\n            case 'id': {\r\n                const result = await getDatapointsTable();\r\n                const options = result.map(item => ({\r\n                    label: `${item.id} | ${item.name}`,\r\n                    value: item.id,\r\n                }));\r\n\r\n                obj.callback && this.sendTo(obj.from, obj.command, options, obj.callback);\r\n                break;\r\n            }\r\n            case 'tableFrom': {\r\n                const tables = await getAllTables();\r\n                const options = tables.map(item => ({\r\n                    label: item,\r\n                    value: item,\r\n                }));\r\n                obj.callback && this.sendTo(obj.from, obj.command, options, obj.callback);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SqlDataShifter(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new SqlDataShifter())();\r\n}\r\n"],
  "mappings": "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",
  "names": ["schedule"]
}
