{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport type { DBConfig, SqlNumberTable } from \"./types/types\";\nimport { setDBConfig, useConnection } from \"./connection\";\nimport { calculateAverage, differenceResult, sumResult } from \"./lib/lib\";\nimport type { Job } from \"node-schedule\";\n// eslint-disable-next-line no-duplicate-imports\nimport schedule from \"node-schedule\";\nimport { createNewTable, saveData } from \"./lib/querys\";\n\nclass SqlDataShifter extends utils.Adapter {\n    private scheduleJob: Job[];\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"sql-data-shifter\",\n        });\n        this.scheduleJob = [];\n        this.on(\"ready\", this.onReady.bind(this));\n        // this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        // this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        console.log(\"SqlDataShifter ready\");\n        const dbConfig: DBConfig = {} as DBConfig;\n\n        if (!this.config.user || !this.config.password || !this.config.database) {\n            return;\n        }\n\n        dbConfig.host = this.config.ip;\n        dbConfig.user = this.config.user;\n        dbConfig.password = this.config.password;\n        dbConfig.database = this.config.database;\n\n        setDBConfig(dbConfig);\n        let isConnectionSuccessful = false;\n        try {\n            isConnectionSuccessful = await useConnection(async (connection) => {\n                if (connection) {\n                    await this.setState(\"info.connection\", true, true);\n                    return true;\n                }\n                this.log.error(\"Connection failed\");\n                return false;\n            });\n        } catch (e) {\n            console.error(e);\n        }\n\n        if (!isConnectionSuccessful) {\n            return;\n        }\n\n        this.log.debug(JSON.stringify(this.config));\n\n        let oldTimestamp = 0;\n\n        for (const entry of this.config.table) {\n            if (!entry.active) {\n                continue;\n            }\n            await createNewTable(entry.tableTo);\n\n            this.scheduleJob.push(\n                schedule.scheduleJob(entry.schedule, async () => {\n                    const table = entry.tableFrom;\n\n                    await useConnection(async (connection) => {\n                        const date = Date.now();\n\n                        let selectQuery: string;\n                        if (entry.delete) {\n                            selectQuery = `SELECT *\n                                           from ${table}\n                                           WHERE id = ?\n                                             AND ts <= ?`;\n                        } else {\n                            selectQuery = `SELECT *\n                                           from ${table}\n                                           WHERE id = ?\n                                             AND ts <= ?\n                                             AND ts > ?`;\n                        }\n                        const [rows] = await connection.execute(selectQuery, [entry.id, date, oldTimestamp]);\n                        oldTimestamp = date;\n                        const result = rows as SqlNumberTable[];\n\n                        if (result.length === 0) {\n                            return;\n                        }\n\n                        if (entry.operation === \"sum\") {\n                            const sum = sumResult(result) * entry.factor;\n                            await saveData(entry, date, sum);\n                        }\n\n                        if (entry.operation === \"dif\") {\n                            const sum = differenceResult(result) * entry.factor;\n                            await saveData(entry, date, sum);\n                        }\n\n                        if (entry.operation === \"avg\") {\n                            const average = calculateAverage(result) * entry.factor;\n                            await saveData(entry, date, average);\n                        }\n\n                        if (entry.delete) {\n                            const deleteQuery = `DELETE\n                                                 FROM ${table}\n                                                 WHERE id = ?\n                                                   AND ts <= ?`;\n\n                            await connection.execute(deleteQuery, [entry.id, date]);\n                        }\n                    });\n                }),\n            );\n        }\n\n        // Initialize your adapter here\n\n        // Reset the connection indicator during startup\n\n        /*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n        // await this.setObjectNotExistsAsync(\"testVariable\", {\n        //     type: \"state\",\n        //     common: {\n        //         name: \"testVariable\",\n        //         type: \"boolean\",\n        //         role: \"indicator\",\n        //         read: true,\n        //         write: true,\n        //     },\n        //     native: {},\n        // });\n\n        /*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n        // the variable testVariable is set to true as command (ack=false)\n        // await this.setStateAsync(\"testVariable\", true);\n        //\n        // // same thing, but the value is flagged \"ack\"\n        // // ack should be always set to true if the value is received from or acknowledged from the target system\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true });\n        //\n        // // same thing, but the state is deleted after 30s (getState will return null afterwards)\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\n        //\n        // // examples for the checkPassword/checkGroup functions\n        // let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n        // this.log.info(\"check user admin pw iobroker: \" + result);\n        //\n        // result = await this.checkGroupAsync(\"admin\", \"admin\");\n        // this.log.info(\"check group user admin group admin: \" + result);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback Callback\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.scheduleJob.forEach((job) => job.cancel());\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch (e) {\n            console.error(e);\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    // /**\n    //  * Is called if a subscribed state changes\n    //  *\n    //  * @param id\n    //  * @param state\n    //  */\n    // private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n    //     if (state) {\n    //         // The state was changed\n    //         this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n    //     } else {\n    //         // The state was deleted\n    //         this.log.info(`state ${id} deleted`);\n    //     }\n    // }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === \"object\" && obj.message) {\n    //         if (obj.command === \"send\") {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info(\"send command\");\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SqlDataShifter(options);\n} else {\n    // otherwise start the instance directly\n    (() => new SqlDataShifter())();\n}\n"],
  "mappings": "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",
  "names": ["schedule"]
}
