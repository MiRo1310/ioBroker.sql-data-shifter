{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport type { DBConfig, SqlIobrokerAdapterRow } from \"./types/types\";\nimport { useConnection } from \"./connection\";\nimport { addParamsToTableItem, calculateAverage, differenceResult, sumResult } from \"./lib/lib\";\nimport type { Job } from \"node-schedule\";\n// eslint-disable-next-line no-duplicate-imports\nimport schedule from \"node-schedule\";\nimport { createNewTable, getAllTables, saveData, saveDataArray, setTimeZone } from \"./app/querys\";\nimport { getDatapointsTable } from \"./app/getTablesForFrontendUsage\";\nimport { initTableSizes, tableSizeCron } from \"./app/tableSize\";\n\nexport const dbConfig: DBConfig = {} as DBConfig;\nexport let _this: SqlDataShifter;\n\nclass SqlDataShifter extends utils.Adapter {\n    private scheduleJob: Job[];\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"sql-data-shifter\",\n        });\n        this.scheduleJob = [];\n        this.on(\"ready\", this.onReady.bind(this));\n        // this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        const { user, database, password, ip } = this.config;\n\n        if (!user || !password || !database) {\n            return;\n        }\n        _this = this;\n\n        dbConfig.host = ip;\n        dbConfig.user = user;\n        dbConfig.password = password;\n        dbConfig.database = database;\n\n        const isConnectionSuccessful = await useConnection(async (connection) => {\n            if (connection) {\n                await this.setState(\"info.connection\", true, true);\n                return true;\n            }\n            this.log.error(\"Connection failed\");\n            return false;\n        });\n\n        if (!isConnectionSuccessful) {\n            return;\n        }\n\n        await setTimeZone(this.config.timeZone);\n        await initTableSizes(this.config.tableSizeCron);\n\n        const tableObject = addParamsToTableItem(this.config.table);\n\n        for (const entry of tableObject) {\n            if (!entry.active) {\n                continue;\n            }\n            await createNewTable(entry.tableTo);\n\n            const timeInMilliseconds = entry.time * 1000;\n\n            const job = schedule.scheduleJob(entry.schedule, async () => {\n                await useConnection(async (connection) => {\n                    const date = Date.now();\n                    this.log.debug(\n                        `Schedule job for id: ${entry.id} started, from ${entry.tableFrom} to ${entry.tableTo}`,\n                    );\n\n                    const selectQuery = `SELECT *\n                                         from ${entry.tableFrom}\n                                         WHERE id = ?\n                                           AND ts <= ?\n                                           AND ts > ?`;\n\n                    const [rows] = await connection.execute(selectQuery, [\n                        entry.id,\n                        date,\n                        entry.oldTimestamp || date - timeInMilliseconds,\n                    ]);\n\n                    this.log.debug(`Date: ${date}, Old date: ${entry.oldTimestamp}`);\n\n                    this.log.debug(`Rows: ${JSON.stringify(rows)}`);\n                    entry.oldTimestamp = date;\n                    const result = rows as SqlIobrokerAdapterRow[];\n\n                    if (result.length === 0) {\n                        if (entry.writeZero) {\n                            await saveData(entry, date, 0);\n                        }\n                        this.log.debug(`No data found for ${entry.id} in ${entry.tableFrom}`);\n                        return;\n                    }\n\n                    if (entry.operation === \"sum\") {\n                        const sum = sumResult(result) * entry.factor;\n                        if (sum === 0 && !entry.writeZero) {\n                            return;\n                        }\n                        await saveData(entry, date, sum);\n                    }\n\n                    if (entry.operation === \"dif\") {\n                        const sum = differenceResult(result) * entry.factor;\n                        if (sum === 0 && !entry.writeZero) {\n                            return;\n                        }\n                        await saveData(entry, date, sum);\n                    }\n\n                    if (entry.operation === \"avg\") {\n                        const average = calculateAverage(result) * entry.factor;\n                        if (average === 0 && !entry.writeZero) {\n                            return;\n                        }\n                        await saveData(entry, date, average);\n                    }\n\n                    if (entry.operation === \"all\") {\n                        await saveDataArray(entry, result);\n                    }\n\n                    if (entry.delete) {\n                        const deleteQuery = `DELETE\n                                             FROM ${entry.tableFrom}\n                                             WHERE id = ?\n                                               AND ts <= ?`;\n\n                        await connection.execute(deleteQuery, [entry.id, date]);\n                    }\n                });\n            });\n            this.scheduleJob.push(job);\n        }\n\n        /*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n        // the variable testVariable is set to true as command (ack=false)\n        // await this.setStateAsync(\"testVariable\", true);\n        //\n        // // same thing, but the value is flagged \"ack\"\n        // // ack should be always set to true if the value is received from or acknowledged from the target system\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true });\n        //\n        // // same thing, but the state is deleted after 30s (getState will return null afterwards)\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\n        //\n        // // examples for the checkPassword/checkGroup functions\n        // let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n        // this.log.info(\"check user admin pw iobroker: \" + result);\n        //\n        // result = await this.checkGroupAsync(\"admin\", \"admin\");\n        // this.log.info(\"check group user admin group admin: \" + result);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback Callback\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.scheduleJob.forEach((job) => job.cancel());\n            tableSizeCron.cancel();\n            callback();\n        } catch (e) {\n            console.error(e);\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    // /**\n    //  * Is called if a subscribed state changes\n    //  *\n    //  * @param id\n    //  * @param state\n    //  */\n    // private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n    //     if (state) {\n    //         // The state was changed\n    //         this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n    //     } else {\n    //         // The state was deleted\n    //         this.log.info(`state ${id} deleted`);\n    //     }\n    // }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        switch (obj.command) {\n            case \"id\": {\n                const result = await getDatapointsTable();\n                const options = result.map((item) => ({\n                    label: `${item.id} | ${item.name}`,\n                    value: item.id,\n                }));\n\n                obj.callback && this.sendTo(obj.from, obj.command, options, obj.callback);\n                break;\n            }\n            case \"tableFrom\": {\n                const tables = await getAllTables();\n                const options = tables.map((item) => ({\n                    label: item,\n                    value: item,\n                }));\n                obj.callback && this.sendTo(obj.from, obj.command, options, obj.callback);\n            }\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SqlDataShifter(options);\n} else {\n    // otherwise start the instance directly\n    (() => new SqlDataShifter())();\n}\n"],
  "mappings": "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",
  "names": ["schedule"]
}
